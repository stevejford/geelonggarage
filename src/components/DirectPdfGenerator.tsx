import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import { Download, Loader2 } from 'lucide-react';

interface DirectPdfGeneratorProps {
  documentType: string;
  documentId: string;
  buttonText?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link" | "warning" | "success";
  className?: string;
}

export function DirectPdfGenerator({
  documentType,
  documentId,
  buttonText,
  variant = "outline",
  className
}: DirectPdfGeneratorProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleGeneratePdf = async () => {
    setIsLoading(true);
    try {
      // Map document type to template name
      let templateName;
      switch (documentType) {
        case "invoice":
          templateName = "invoice_template";
          break;
        case "quote":
          templateName = "quote_template";
          break;
        case "workOrder":
          templateName = "work_order_template";
          break;
        default:
          throw new Error(`Unsupported document type: ${documentType}`);
      }

      // Try multiple PDF service URLs in case one fails
      const pdfServiceUrls = [
        'https://geelonggarage-1.onrender.com',
        'http://localhost:3001'
      ];

      // Simple test data
      const testData = {
        templateName,
        templateData: {
          company_name: 'Geelong Garage',
          company_address_line1: '123 Main Street',
          company_address_line2: 'Geelong, VIC 3220',
          company_phone: '(03) 5222 1234',
          company_email: 'info@geelonggarage.com',
          company_bank_name: 'Commonwealth Bank of Australia',
          company_account_name: 'Geelong Garage Pty Ltd',
          company_bsb: '063-000',
          company_account_number: '12345678',
          logo_url: 'https://via.placeholder.com/150',

          // Quote specific fields
          quote_number: 'TEST-001',
          quote_date: new Date().toLocaleDateString('en-AU'),
          expiry_date: new Date(Date.now() + 30*24*60*60*1000).toLocaleDateString('en-AU'),

          // Invoice specific fields
          invoice_number: 'INV-001',
          invoice_date: new Date().toLocaleDateString('en-AU'),
          due_date: new Date(Date.now() + 14*24*60*60*1000).toLocaleDateString('en-AU'),

          // Work order specific fields
          work_order_number: 'WO-001',
          created_date: new Date().toLocaleDateString('en-AU'),
          scheduled_date: new Date(Date.now() + 7*24*60*60*1000).toLocaleDateString('en-AU'),

          customer_name: 'Test Customer',
          customer_address_line1: '456 Test Street',
          customer_address_line2: 'Testville, VIC 3000',
          customer_phone: '0400 123 456',
          customer_email: 'test@example.com',

          status: 'Draft',
          status_class: 'draft',

          line_items: [
            {
              quantity: 1,
              description: 'Test Service',
              unit_price: '100.00',
              total: '100.00'
            }
          ],

          subtotal: '100.00',
          tax: '10.00',
          total: '110.00',

          notes: 'This is a test document generated by the direct PDF generator.',
          generated_date: new Date().toLocaleDateString('en-AU')
        },
        options: {
          format: 'A4',
          margin: {
            top: '10mm',
            right: '10mm',
            bottom: '10mm',
            left: '10mm'
          }
        }
      };

      console.log('Preparing to generate PDF with template:', templateName);

      // Simplify the test data to minimize potential issues
      const simplifiedData = {
        templateName,
        templateData: {
          company_name: 'Geelong Garage',
          company_address_line1: '123 Main Street',
          company_address_line2: 'Geelong, VIC 3220',
          company_phone: '(03) 5222 1234',
          company_email: 'info@geelonggarage.com',

          // Basic fields that should work for all templates
          quote_number: 'TEST-001',
          invoice_number: 'INV-001',
          work_order_number: 'WO-001',

          customer_name: 'Test Customer',

          status: 'Draft',

          line_items: [
            {
              quantity: 1,
              description: 'Test Service',
              unit_price: '100.00',
              total: '100.00'
            }
          ],

          subtotal: '100.00',
          tax: '10.00',
          total: '110.00',
        },
        options: {
          format: 'A4',
          margin: {
            top: '10mm',
            right: '10mm',
            bottom: '10mm',
            left: '10mm'
          }
        }
      };

      // Try each PDF service URL until one works
      let response = null;
      let lastError = null;

      for (const baseUrl of pdfServiceUrls) {
        try {
          console.log(`Trying PDF service at ${baseUrl}...`);

          // Use a more reliable approach to check if the service is accessible
          try {
            // First try to generate the PDF directly without checking templates
            response = await fetch(`${baseUrl}/api/pdf/generate`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer QdfEXUtFKMOVINvTGSWow8Zj52qxe7Ay`
              },
              body: JSON.stringify(simplifiedData),
              mode: 'cors',
              credentials: 'omit',
              cache: 'no-cache'
            });

            if (response.ok) {
              console.log(`Successfully generated PDF using ${baseUrl}`);
              break; // Success! Exit the loop
            } else {
              const errorText = await response.text();
              console.error(`Error from ${baseUrl}:`, errorText);
              lastError = new Error(`PDF generation failed at ${baseUrl}: ${response.status} ${response.statusText} - ${errorText}`);
            }
          } catch (fetchError) {
            console.error(`Error fetching from ${baseUrl}:`, fetchError);
            lastError = fetchError;
          }
        } catch (error) {
          console.error(`Error connecting to ${baseUrl}:`, error);
          lastError = error;
        }
      }

      // If we've tried all URLs and none worked, throw the last error
      if (!response || !response.ok) {
        throw lastError || new Error('Failed to generate PDF from all available services');
      }

      // Get the PDF as a blob
      const pdfBlob = await response.blob();

      // Create a URL for the blob
      const pdfUrl = URL.createObjectURL(pdfBlob);

      // Open the PDF in a new tab
      window.open(pdfUrl, '_blank');

      toast({
        title: 'Success',
        description: 'PDF generated successfully!',
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast({
        title: 'Error',
        description: `Failed to generate PDF: ${error.message}`,
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Button
      variant={variant}
      onClick={handleGeneratePdf}
      disabled={isLoading}
      className={className}
    >
      {isLoading ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generating...
        </>
      ) : (
        <>
          <Download className="mr-2 h-4 w-4" /> {buttonText || "Generate PDF"}
        </>
      )}
    </Button>
  );
}
